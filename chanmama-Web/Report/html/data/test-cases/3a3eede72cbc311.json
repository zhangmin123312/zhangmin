{
  "uid" : "3a3eede72cbc311",
  "name" : "test_code_login",
  "fullName" : "Testcase.login.test_login.Test_Login#test_code_login",
  "historyId" : "adca1db74c21bb1ecee81e2b72a6d058",
  "time" : {
    "start" : 1649829785338,
    "stop" : 1649829797316,
    "duration" : 11978
  },
  "status" : "broken",
  "statusMessage" : "TypeError: exceptions must derive from BaseException",
  "statusTrace" : "self = <login.test_login.Test_Login object at 0x10f8a2040>\n\n    @allure.story(\"验证验证码登录\")\n    def test_code_login(self):\n        # 验证码登录流程\n        try:\n>           Page_Obj(self.driver).go_to_login().code_login(18046304924, 123456)\n\nTestcase/login/test_login.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Selenium.pom.Login_Page.Login_Page object at 0x10e7a04f0>\nuser = 18046304924, code = 123456\n\n    def code_login(self, user, code):\n        \"\"\"\n        验证码登录\n        \"\"\"\n        self.click_element(['css', '.el-menu-item'], 1)\n        self.input_data(['css', '.el-input__inner'], user, 0)\n        self.click_element(['css', '.flex.align-items-center.justify-content-center.fs14.cursor-pointer>div'])\n>       self.input_data(['css', 'input[placeholder=请输入验证码]'], code)\n\nSelenium/pom/Login_Page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Selenium.pom.Login_Page.Login_Page object at 0x10e7a04f0>\nlocate = ['css', 'input[placeholder=请输入验证码]'], data = 123456\nelemrnts_num = None\n\n    def input_data(self, locate, data,elemrnts_num=None):\n        # 对输入框输入值\n        if elemrnts_num is not None:\n            el = self.locateElements(locate)[elemrnts_num]\n            el.click()\n            el.clear()\n            el.send_keys(data)\n        el = self.locateElement(locate)\n        # 执行输入操作\n>       el.click()\n\nSelenium/base/BasePage.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"febfce04a1931a7273198867a34aea4b\", element=\"42da1044-ae1c-4fe3-99c6-1400051e39ed\")>\n\n    def click(self):\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"febfce04a1931a7273198867a34aea4b\", element=\"42da1044-ae1c-4fe3-99c6-1400051e39ed\")>\ncommand = 'clickElement'\nparams = {'id': '42da1044-ae1c-4fe3-99c6-1400051e39ed', 'sessionId': 'febfce04a1931a7273198867a34aea4b'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"febfce04a1931a7273198867a34aea4b\")>\ndriver_command = 'clickElement'\nparams = {'id': '42da1044-ae1c-4fe3-99c6-1400051e39ed'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e7a0eb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff71b99109 _pthread_start + 148\\\\n24  libsystem_pthread.dylib             0x00007fff71b94b8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"text\" autocomplete=\"off\" placeholder=\"请输入验证码\" class=\"el-input__inner\"> is not clickable at point (980, 292). Other element would receive the click: <div class=\"t-mask\" id=\"t_mask\"></div>\nE         (Session info: chrome=100.0.4896.75)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <login.test_login.Test_Login object at 0x10f8a2040>\n\n    @allure.story(\"验证验证码登录\")\n    def test_code_login(self):\n        # 验证码登录流程\n        try:\n            Page_Obj(self.driver).go_to_login().code_login(18046304924, 123456)\n            time.sleep(1)\n        except:\n            with allure.step('添加失败截图...'):\n                allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n>           raise False\nE           TypeError: exceptions must derive from BaseException\n\nTestcase/login/test_login.py:60: TypeError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_method_fixture_Test_Login",
    "time" : {
      "start" : 1649829783511,
      "stop" : 1649829785337,
      "duration" : 1826
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: exceptions must derive from BaseException",
    "statusTrace" : "self = <login.test_login.Test_Login object at 0x10f8a2040>\n\n    @allure.story(\"验证验证码登录\")\n    def test_code_login(self):\n        # 验证码登录流程\n        try:\n>           Page_Obj(self.driver).go_to_login().code_login(18046304924, 123456)\n\nTestcase/login/test_login.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Selenium.pom.Login_Page.Login_Page object at 0x10e7a04f0>\nuser = 18046304924, code = 123456\n\n    def code_login(self, user, code):\n        \"\"\"\n        验证码登录\n        \"\"\"\n        self.click_element(['css', '.el-menu-item'], 1)\n        self.input_data(['css', '.el-input__inner'], user, 0)\n        self.click_element(['css', '.flex.align-items-center.justify-content-center.fs14.cursor-pointer>div'])\n>       self.input_data(['css', 'input[placeholder=请输入验证码]'], code)\n\nSelenium/pom/Login_Page.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Selenium.pom.Login_Page.Login_Page object at 0x10e7a04f0>\nlocate = ['css', 'input[placeholder=请输入验证码]'], data = 123456\nelemrnts_num = None\n\n    def input_data(self, locate, data,elemrnts_num=None):\n        # 对输入框输入值\n        if elemrnts_num is not None:\n            el = self.locateElements(locate)[elemrnts_num]\n            el.click()\n            el.clear()\n            el.send_keys(data)\n        el = self.locateElement(locate)\n        # 执行输入操作\n>       el.click()\n\nSelenium/base/BasePage.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"febfce04a1931a7273198867a34aea4b\", element=\"42da1044-ae1c-4fe3-99c6-1400051e39ed\")>\n\n    def click(self):\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"febfce04a1931a7273198867a34aea4b\", element=\"42da1044-ae1c-4fe3-99c6-1400051e39ed\")>\ncommand = 'clickElement'\nparams = {'id': '42da1044-ae1c-4fe3-99c6-1400051e39ed', 'sessionId': 'febfce04a1931a7273198867a34aea4b'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"febfce04a1931a7273198867a34aea4b\")>\ndriver_command = 'clickElement'\nparams = {'id': '42da1044-ae1c-4fe3-99c6-1400051e39ed'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e7a0eb0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...fff71b99109 _pthread_start + 148\\\\n24  libsystem_pthread.dylib             0x00007fff71b94b8b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <input type=\"text\" autocomplete=\"off\" placeholder=\"请输入验证码\" class=\"el-input__inner\"> is not clickable at point (980, 292). Other element would receive the click: <div class=\"t-mask\" id=\"t_mask\"></div>\nE         (Session info: chrome=100.0.4896.75)\n\n/usr/local/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <login.test_login.Test_Login object at 0x10f8a2040>\n\n    @allure.story(\"验证验证码登录\")\n    def test_code_login(self):\n        # 验证码登录流程\n        try:\n            Page_Obj(self.driver).go_to_login().code_login(18046304924, 123456)\n            time.sleep(1)\n        except:\n            with allure.step('添加失败截图...'):\n                allure.attach(self.driver.get_screenshot_as_png(), \"失败截图\", allure.attachment_type.PNG)\n>           raise False\nE           TypeError: exceptions must derive from BaseException\n\nTestcase/login/test_login.py:60: TypeError",
    "steps" : [ {
      "name" : "添加失败截图...",
      "time" : {
        "start" : 1649829796912,
        "stop" : 1649829797316,
        "duration" : 404
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "e3cf1ae04501302b",
        "name" : "失败截图",
        "source" : "e3cf1ae04501302b.png",
        "type" : "image/png",
        "size" : 770089
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 1,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_method_fixture_Test_Login::0",
    "time" : {
      "start" : 1649829797353,
      "stop" : 1649829797457,
      "duration" : 104
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "验证验证码登录"
  }, {
    "name" : "parentSuite",
    "value" : "Testcase.login"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "Test_Login"
  }, {
    "name" : "host",
    "value" : "chandashideMacBook-Pro-7.local"
  }, {
    "name" : "thread",
    "value" : "4672-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Testcase.login.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "3a3eede72cbc311.json",
  "parameterValues" : [ ]
}